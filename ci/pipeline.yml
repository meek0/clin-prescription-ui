groups:
  - name: prescription-ui-cypress
    jobs:
      - run-cypress-tests-prescription-ui    
  - name: update-pipeline
    jobs:
      - update-pipeline


resource_types:
- name: time
  type: registry-image
  source:
    repository: concourse/time-resource

- name: git
  type: registry-image
  source:
    repository: concourse/git-resource
    username: ((docker.username))
    password: ((docker.password))

- name: pull-request
  type: docker-image
  source:
    repository: teliaoss/github-pr-resource
    username: ((docker.username))
    password: ((docker.password))
    
- name: slack-notification
  type: docker-image
  source:
    repository: cfcommunity/slack-notification-resource
    username: ((docker.username))
    password: ((docker.password))
    tag: latest

resources:
# Cypress
- name: daily-schedule
  type: time
  check_every: 30s
  source:
    interval: 24h
    start: "03:00 AM"
    stop: "04:30 AM"
    location: "America/Toronto"
    days: ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday"]

- name: slack-alert-cypress
  type: slack-notification
  source:
    url: ((slack.webhook-url-cypress))

- name: minio-storage
  type: s3
  source:
    endpoint: https://s3.cqgc.hsj.rtss.qc.ca
    bucket: cqgc-qa-cypress-tests
    access_key_id: "((minio.access_key))"
    secret_access_key: ((minio.secret_key))
    use_ssl: false  # Set to true if MinIO is configured with SSL
    regexp: test-results/merged-results-.*\.xml

- name: git-prescription-ui
  type: git
  icon: github
  check_every: 30s
  webhook_token: ((webhook-token))
  source:
    uri: git@github.com:Ferlab-Ste-Justine/clin-prescription-ui.git
    branch: main
    private_key: ((git.prescription-ssh-key))
    # ignore_paths: [ci/]

- name: ci-folder
  type: git
  check_every: 30s
  source:
    uri: git@github.com:Ferlab-Ste-Justine/clin-prescription-ui.git
    branch: main
    paths: [ci]
    private_key: ((git.prescription-ssh-key))

jobs:
- name: run-cypress-tests-prescription-ui  
  plan:
    - get: daily-schedule
      trigger: true
    - get: git-prescription-ui
      trigger: false
    - task: prepare-and-run-cypress
      attempts: 6
      params:
        CYPRESS_PASSWORD: ((cypress.password))
      config:
        platform: linux
        image_resource:
          type: registry-image
          source:
            repository: ferlabcrsj/cypress-included-custom 
            tag: latest
        inputs:
          - name: git-prescription-ui
        outputs:
          - name: test-results
          - name: timestamp
        run:
          path: bash
          args:
            - -c
            - |
              set +e 

              # Navigate to the project directory
              pushd git-prescription-ui

              # Install dependencies
              npm install

              # Copy env-qa to .env
              cp env-qa .env

              # Update the .env file with the Cypress password
              sed -i 's/CYPRESS_PASSWORD=""/CYPRESS_PASSWORD="'$CYPRESS_PASSWORD'"/' .env

              # Run Cypress tests
              npx cypress run --config-file cypress.config.ts --config retries=9 --browser chrome --reporter junit --reporter-options "mochaFile=test-results/results-[hash].xml" --spec "cypress/e2e/**/*.cy.{js,jsx,ts,tsx}"

              # Generate a timestamp
              TIMESTAMP=$(date +%Y%m%d%H%M%S)
              echo $TIMESTAMP > ../timestamp/timestamp.txt

              # Merge the XML files using junit-merge if results exist
              if compgen -G "test-results/results-*.xml" > /dev/null; then
                npx junit-merge test-results/results-*.xml -o ../test-results/merged-results-${TIMESTAMP}.xml
              else
                echo "No results to merge." > ../test-results/merged-results-${TIMESTAMP}.xml
              fi

              popd
              exit 0

    - put: minio-storage
      attempts: 3
      params:
        file: test-results/merged-results-*.xml
      no_get: true

    - task: generate-presigned-url
      attempts: 3
      params:
        MINIO_ACCESS_KEY: ((minio.access_key))
        MINIO_SECRET_KEY: ((minio.secret_key))
      config:
        platform: linux
        image_resource:
          type: registry-image
          source:
            repository: ferlabcrsj/cypress-included-custom 
            tag: latest
        inputs:
          - name: timestamp
          - name: test-results
        outputs:
          - name: slack-data
        run:
          path: sh
          args:
            - -c
            - |
              set -e  # Exit on error

              # Read the timestamp
              TIMESTAMP=$(cat timestamp/timestamp.txt)

              # Check if the merged results file is not empty
              if [ -s test-results/merged-results-${TIMESTAMP}.xml ]; then
                # Generate a pre-signed URL
                mc alias set myminio https://s3.cqgc.hsj.rtss.qc.ca $MINIO_ACCESS_KEY $MINIO_SECRET_KEY
                PRESIGNED_URL=$(mc share download myminio/cqgc-qa-cypress-tests/test-results/merged-results-${TIMESTAMP}.xml --expire=48h | grep -oP '(?<=Share: ).*')

                # Prepare Slack message for success
                echo '[
                  {
                    "color": "good",
                    "title": "Prescription UI Cypress Test Results",
                    "text": "Cypress test results are available for Prescription UI. <'$PRESIGNED_URL'|View Results>"
                  }
                ]' > slack-data/attachments.json
              else
                # Prepare Slack message for absence of results
                echo '[
                  {
                    "color": "warning",
                    "title": "Prescription UI Cypress Test Results",
                    "text": "No test results are available for Prescription UI due to an error or no tests were executed."
                  }
                ]' > slack-data/attachments.json
              fi
              

    - put: slack-alert-cypress
      params:
        attachments_file: slack-data/attachments.json

- name: update-pipeline
  plan:
    - get: ci-folder
      trigger: true
    - set_pipeline: self
      file: ci-folder/ci/pipeline.yml
